#!/bin/bash

# A QAD script to enable new zerotier hosts via the zerotier API
# $1 is the ansible host or group name
# $2 is the ztsetup config file that was used on each host

set -eo pipefail
err_report() {
    echo "errexit on line $(caller)" >&2
}
trap err_report ERR

die() {
    echo $2 >&2
    exit $1
}

CURL_ARGS=-SsfL
if [[ ! $ZT_TOKEN_FILE ]]; then
    ZT_TOKEN_FILE=/root/.zerotier-token
fi

inventory="$1"
config="$2"
REMOTE_USER="$3"

[[ -n "$inventory" && -n "$config" ]] || die 99 "Usage: $0 <target> <config> [<remote_user>]"
[[ -f "$config" ]] || die 99 "Could not open $config"

. "$config"
[[ $REMOTE_USER ]] || REMOTE_USER="$USER"

# canonicalise format
NETWORKS=$(echo "$NETWORKS"|tr ' ,' ': ')

[[ $NETWORKS ]] || die 0 "No networks, nothing to do"

ZT_TOKEN=$(sudo cat $ZT_TOKEN_FILE)

if ! curl $CURL_ARGS -H "$ZT_TOKEN" https://my.zerotier.com/api/status \
        | jq .online | grep -q true; then
    die 1 "Zerotier is offline. Aborting!"
fi

hosts=$(ansible $inventory -m command -u "$REMOTE_USER" -b -a \
    'perl -e "open(IN, q[-|], q[zerotier-cli status]); while(<IN>) { print if(s/^.*200 info ([0-9a-fA-F]+) .*$/RESULT;{{ inventory_hostname }};$1/) }"')

for network in $NETWORKS; do
    network_id=${network%%:*}
    for word in $hosts; do
        host=${word#RESULT;}
        if [[ $word == $host ]]; then
            continue
        fi
        hostname=${host%;*}
        host_id=${host#*;}
        echo "Authorizing $host_id ($host) on network $network_id" >&2
        curl -XPOST $CURL_ARGS -H "$ZT_TOKEN" \
            -d '{"name": "'$hostname'", "config": {"authorized": true}}' \
            "https://my.zerotier.com/api/network/${network_id}/member/${host_id}" \
            | jq . \
            || die 2 "Could not authorize"
    done
done
