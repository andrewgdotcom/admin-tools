#!/bin/bash

# Test the vercomp tool. We assume we are in a ./test subdir WRT the tool

SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")
# shellcheck disable=SC1090
. "$SCRIPT_DIR/../poshlib/poshlib.sh" || exit 1
use-from ..
use vercomp

testvercomp () {
    vercomp $1 $2
    case $? in
        0) op='=';;
        1) op='>';;
        2) op='<';;
    esac
    if [[ $op != $3 ]]
    then
        echo "FAIL: Expected '$1 $3 $2', Got '$1 $op $2'"
    else
        echo "Pass: '$1 $op $2'"
    fi
}

# Run tests
# argument table format:
# testarg1   testarg2     expected_relationship
while read -r test
do
    testvercomp $test
done << EOF
1            1            =
2.1          2.2          <
3.0.4.10     3.0.4.2      >
4.08         4.08.01      <
3.2.1.9.8144 3.2          >
3.2          3.2.1.9.8144 <
1.2          2.1          <
2.1          1.2          >
5.6.7        5.6.7        =
1.01.1       1.1.1        =
1.1.1        1.01.1       =
1            1.0          =
1.0          1            =
1.0.2.0      1.0.2        =
1..0         1.0          =
1.0          1..0         =
EOF

# Test that the tester can fail

if [[ $(testvercomp 1 1 '>') =~ "Pass.*" ]]; then
    echo "FAIL: self-test"
else
    echo "Pass: self-test"
fi

# Test sugar wrappers

vercomp.ge 1.2 1.2 || echo "FAIL: vercomp.ge 1.2 1.2"
vercomp.le 1.2 1.2 || echo "FAIL: vercomp.le 1.2 1.2"

vercomp.ge 1.2 1.1 || echo "FAIL: vercomp.ge 1.2 1.1"
vercomp.le 1.2 1.2 || echo "FAIL: vercomp.ge 1.2 1.2"

! vercomp.gt 1.2 1.2 || echo "FAIL: vercomp.gt 1.2 1.2"
! vercomp.lt 1.2 1.2 || echo "FAIL: vercomp.lt 1.2 1.2"

vercomp.gt 1.2 1.1 || echo "FAIL: vercomp.gt 1.2 1.1"
vercomp.lt 1.1 1.2 || echo "FAIL: vercomp.lt 1.1 1.2"
